/*
\| LegitSoulja
\| All Rights Reserved
\| Documentation: https://github.com/LegitSoulja/SimpleWorker
*/
(function(f,k){var h=f.URL.createObjectURL(new Blob(["(",function(){self.onmessage=function(a){return self.postMessage(eval("(function(func){return func;})("+a.data.func+")").apply(null,a.data.args))}}.toString(),")()"],{type:"application/javascript"})),d=function(a){0<a&&(a=-Math.abs(a));return(4294967295+a+1).toString(16).toUpperCase()},g=function(a,b){for(var c=0;c<b;c++)a.shift();return a},e=function(){this.workers={}};e.prototype={prepare:function(a){if("function"!==typeof a)throw Error("Prepare must require a Thread(Function)");
var b=-Math.abs(Object.keys(this.workers).length+1),c=[];1<arguments.length&&(Array.prototype.push.apply(c,arguments),c=g(c,1));this.workers[d(b)]={worker:new Worker(h),args:c,init:function(a){this.worker.onmessage=function(b){return a(b.data)};this.worker.postMessage({func:this.func.toString(),args:this.args})},func:a};this.pid--;return b},restore:function(a,b){a=d(a);if(null!=this.workers[a]){null!=b&&(this.workers[a].func=b);var c=[];2<arguments.length&&(Array.prototype.push.apply(c,arguments),
c=g(c,2),this.workers[a].args=c)}else throw Error("Thread 0x"+a+" does not exist.");},execute:function(a,b){a=d(a);if(null!=this.workers[a])if("function"===typeof b)this.workers[a].init(function(a){return b(a)});else throw Error("Execute must require an async callback.");else throw Error("Thread 0x"+a+" does not exist.");},kill:function(a){a=d(a);if(null!=this.workers[a])this.workers[a].worker.terminate(),delete this.workers[a];else throw Error("Could not find thread 0x"+a+".");},killAll:function(){var a=
Object.keys(this.workers),b;for(b in a)this.workers[a[b]].worker.terminate(),delete this.workers[a[b]]},newInstance:function(){return new e}};f.SimpleWorker=new e})(window,document);
